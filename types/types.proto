syntax = "proto3";
package irismod.nft;

import "third_party/proto/gogoproto/gogo.proto";

option go_package = "github.com/irismod/nft/types";
option (gogoproto.goproto_getters_all)  = false;


// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
    string schema = 3 [(gogoproto.moretags) = "yaml:\"schema\""];
}

// MsgTransferNFT defines an SDK message for transfer a NFT to recipient.
message MsgTransferNFT {
    option (gogoproto.equal) = true;

    bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes recipient = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string denom = 3 [(gogoproto.moretags) = "yaml:\"denom\""];
    string id = 4 [(gogoproto.moretags) = "yaml:\"id\"",(gogoproto.customname)  ="ID"];
    string token_uri = 5 [(gogoproto.moretags) = "yaml:\"token_uri\"",(gogoproto.customname)  ="TokenURI"];
    string token_data = 6 [(gogoproto.moretags) = "yaml:\"token_data\""];
}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option (gogoproto.equal) = true;

    bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
    string id = 3 [(gogoproto.moretags) = "yaml:\"id\"",(gogoproto.customname)  ="ID"];
    string token_uri = 4 [(gogoproto.moretags) = "yaml:\"token_uri\"",(gogoproto.customname)  ="TokenURI"];
    string token_data = 5 [(gogoproto.moretags) = "yaml:\"token_data\""];
}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option (gogoproto.equal) = true;

    bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    bytes recipient = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string denom = 3 [(gogoproto.moretags) = "yaml:\"denom\""];
    string id = 4 [(gogoproto.moretags) = "yaml:\"id\"",(gogoproto.customname)  ="ID"];
    string token_uri = 5 [(gogoproto.moretags) = "yaml:\"token_uri\"",(gogoproto.customname)  ="TokenURI"];
    string token_data = 6 [(gogoproto.moretags) = "yaml:\"token_data\""];
}

// MsgBurnNFT defines an SDK message for burn a NFT.
message MsgBurnNFT {
    option (gogoproto.equal) = true;

    bytes sender = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string denom = 2 [(gogoproto.moretags) = "yaml:\"denom\""];
    string id = 3 [(gogoproto.moretags) = "yaml:\"id\"",(gogoproto.customname)  ="ID"];
}

// BaseNFT defines a non fungible token.
message BaseNFT {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = false;


    string id = 1 [(gogoproto.moretags) = "yaml:\"id\"",(gogoproto.customname)  ="ID"];
    bytes owner = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
    string token_uri = 3 [(gogoproto.moretags) = "yaml:\"token_uri\"",(gogoproto.customname)  ="TokenURI"];
    string token_data = 4 [(gogoproto.moretags) = "yaml:\"token_data\""];
}

// Denom defines a type of NFT.
message Denom {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = false;

    string name = 1 [(gogoproto.moretags) = "yaml:\"name\""];
    string schema = 2 [(gogoproto.moretags) = "yaml:\"schema\""];
    bytes creator = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
}